import java.util.LinkedList;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.WakerBehaviour;
import jade.lang.acl.ACLMessage;
import jade.wrapper.AgentController;
import jade.wrapper.ContainerController;
import jade.wrapper.StaleProxyException;


public class FerryAgent extends Agent {

	public Point actualPosition;
	public LinkedList<Point> allPositions;
	
	private Point edge1Position;
	private Point edge2Position;
	
	private int freePlacesFrom1To2;
	private boolean goingFrom1To2;
	private int freePlacesFrom2To1;
	private boolean goingFrom2To1;
	
	private int positionIndex;
	
	protected void setup(){
		edge1Position=new Point(0,0);
		edge2Position=new Point(1.1,0);
		
		freePlacesFrom1To2=20;
		goingFrom1To2=false;
		freePlacesFrom2To1=20;
		goingFrom2To1=false;
		
		positionIndex=0;
		actualPosition=new Point(1.1,0);
		allPositions=new LinkedList<Point>();
		allPositions.add(new Point(0,0));
		allPositions.add(new Point(0.1,0));
		allPositions.add(new Point(0.2,0));
		allPositions.add(new Point(0.3,0));
		allPositions.add(new Point(0.4,0));
		allPositions.add(new Point(0.5,0));
		allPositions.add(new Point(0.6,0));
		allPositions.add(new Point(0.7,0));
		allPositions.add(new Point(0.8,0));
		allPositions.add(new Point(0.9,0));
		allPositions.add(new Point(1,0));
		allPositions.add(new Point(1.1,0));
		
		
		addBehaviour(new CyclicBehaviour(this){
			private static final long serialVersionUID = 1L;
			@Override
			public void action() {
				ACLMessage rcv = receive();
				if(rcv !=null) {
					if(rcv.getConversationId().contains("Vehicles Order")){
						HandleRequestForNewSupply(rcv);
					}
				}
				else{
					block();
				}
			}
		});
	}
	
	public void HandleRequestForNewSupply(ACLMessage msg){
		String[] description=msg.getContent().split("\n");
		int edgeNr=Integer.parseInt((description[0].split(":")[1]).trim());
		int vehicleCount=Integer.parseInt((description[1].split(":")[1]).trim());
		int timeToGet=Integer.parseInt((description[2].split(":")[1]).trim());
		
		SupplyRequest response=CalculateFerryPossibility(new SupplyRequest(edgeNr,vehicleCount,timeToGet));
		
		System.out.println(getAID().getName() +": Handle Vehicles Order Request from "+msg.getSender().getLocalName());
		SendResponseForNewSupply(msg.getSender(),response);
	}

	private void SendResponseForNewSupply(AID receiver,SupplyRequest response) {
		ACLMessage msg = new ACLMessage(ACLMessage.INFORM);
		msg.setConversationId("Vehicles Order");
		String content= "Edge: "+response.EdgeNr+"\n"+
		"Vehicle count: "+response.VehicleCount+"\n"+
				"Time to get: "+ response.RequestedTime;
		msg.setContent(content);
		msg.addReceiver(receiver);
		System.out.println(getAID().getName() +": Send Vehicles Order Response to "+receiver.getLocalName());
		send(msg);
	}
	
	private SupplyRequest CalculateFerryPossibility(SupplyRequest request){
		SupplyRequest response=new SupplyRequest(request.EdgeNr,0,0);
		response.EdgeNr=request.EdgeNr;
		if(request.EdgeNr==1){
			if(actualPosition.equals(edge1Position)){
				response.RequestedTime=0;
			}
			else if(goingFrom2To1){
				response.RequestedTime=positionIndex;
			}
			else {
				return response;
			}
				
			if(freePlacesFrom1To2>request.VehicleCount){
				response.VehicleCount=request.VehicleCount;
				freePlacesFrom1To2-=request.VehicleCount;
			}
			else{
				response.VehicleCount=freePlacesFrom1To2;
				freePlacesFrom1To2=0;
			}
		}
		else{  //request.EdgeNr==2
			if(actualPosition.equals(edge2Position)){
				response.RequestedTime=0;
			}
			else if(goingFrom1To2){
				response.RequestedTime=allPositions.size()-positionIndex-1;
			}
			else {
				return response;
			}
				
			if(freePlacesFrom2To1>request.VehicleCount){
				response.VehicleCount=request.VehicleCount;
				freePlacesFrom2To1-=request.VehicleCount;
			}
			else{
				response.VehicleCount=freePlacesFrom2To1;
				freePlacesFrom2To1=0;
			}
		}
		return response;
	}
	
	
}
