import java.util.LinkedList;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.TickerBehaviour;
import jade.lang.acl.ACLMessage;


public class TransportVehicleAgent extends Agent {

	//starting params
	private static final int CAPACITY=20;
	private FerryState state=FerryState.SHORE_1;
	private String ferryName="Ferry1";	
	
	//extra position params
	public Point actualPosition;
	public LinkedList<Point> allPositions;
	private int positionIndex;
		
	//extra capacity params
	private int freePlacesFrom1To2=CAPACITY;
	private int freePlacesFrom2To1=CAPACITY;
	private int handlePlacesFrom1To2=0;
	private int handlePlacesFrom2To1=0;
	
	protected void setup(){
		
		actualPosition=new Point(0,0);
		allPositions=new LinkedList<Point>();
		allPositions.add(new Point(0,0));
		allPositions.add(new Point(0.1,0));
		allPositions.add(new Point(0.2,0));
		allPositions.add(new Point(0.3,0));
		allPositions.add(new Point(0.4,0));
		allPositions.add(new Point(0.5,0));
		allPositions.add(new Point(0.6,0));
		allPositions.add(new Point(0.7,0));
		allPositions.add(new Point(0.8,0));
		allPositions.add(new Point(0.9,0));
		allPositions.add(new Point(1,0));
		allPositions.add(new Point(1.1,0));
		positionIndex=0;

		
		addBehaviour(new CyclicBehaviour(this){
			private static final long serialVersionUID = 1L;
			@Override
			public void action() {
				ACLMessage rcv = receive();
				if(rcv !=null) {
					if(rcv.getConversationId().contains("Vehicles Order")){
						HandleRequestForNewSupply(rcv);
					}
				}
				else{
					block();
				}
			}
		});
		
		addBehaviour(new TickerBehaviour(this,1000){
			private static final long serialVersionUID = 1L;
			@Override
			public void onTick() {
				HandleTimeElapsed();
			}
		});
	}
	
	private void HandleTimeElapsed(){
		if(positionIndex<allPositions.size()-1){
			positionIndex++;
		}
		else{
			AID receiver=new AID(ferryName,AID.ISLOCALNAME);
			ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
			msg.setConversationId("Vehicles Order");
			String content= "Shore nr: "+shoreNumber+"\n"+
					"Vehicle count: "+vehicleCount+"\n"+
					"Road time: "+ roadTime;
			msg.setContent(content);
			msg.addReceiver(receiver);
			System.out.println(getAID().getName() +": Send Vehicles Order Request to "+receiver.getLocalName());
			send(msg);
		}
		
	}
		switch(state){
			case SHORE_1:
				if(handlePlacesFrom1To2==CAPACITY){
					state=FerryState.TRIP_FROM_1_TO_2;
					freePlacesFrom1To2=CAPACITY;
					handlePlacesFrom1To2=0;
				}
				break;
			case TRIP_FROM_1_TO_2:
				if(positionIndex<allPositions.size()-1){
					positionIndex++;
				}
				else{
					state=FerryState.SHORE_2;
				}
				break;
			case SHORE_2:
				if(handlePlacesFrom2To1==CAPACITY){
					state=FerryState.TRIP_FROM_2_TO_1;
					freePlacesFrom2To1=CAPACITY;
					handlePlacesFrom2To1=0;
				}
				break;
			case TRIP_FROM_2_TO_1:
				if(positionIndex>0){
					positionIndex--;
				}
				else{
					state=FerryState.SHORE_1;
				}
				break;
		}
		System.out.println(getAID().getName() +": My location is "+allPositions.get(positionIndex));
		System.out.println(getAID().getName() +": My state is "+state);
	
}
